@charset 'UTF-8';

//-----------------------------------------------------
// mixin scss
// 包括常用的mixin, %, @function 及辅助的btn和背景图片icon
// mixin，通过@include调用，样式通过拷贝的方式使用，尤其适用于传递参数
// %，通过@extend调用，样式通过组合申明的方式使用，适用于不传参数的代码片段
// @function，返回一个值，用于调用
//-----------------------------------------------------

// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------

// Center-align a block level element
@mixin center-block($extend: true)
{
    @if $extend
    {
        @extend %center-block;
    }
    @else
    {
        margin-right: auto;  margin-left: auto;
    }
}

%center-block
{
    @include center-block(false);
}

// clearfix
@mixin clearfix($extend: true,$atParent: true)
{
    @if $extend
    {
        @extend %clearfix;
    }
    @else
    {
        @if $atParent
        {
            &::before,
            &::after
            {
                display: table;  content: '';
            }
            &::after
            {
                clear: both;
            }
        }
        @else
        {
            clear: both;
        }
    }
}

%clearfix
{
    @include clearfix(false);
}

// Hide only visually, but have it available for screenreaders
// 只隐藏于视觉，屏幕浏览器可以阅读
@mixin hidden-clip($extend: true)
{
    @if $extend
    {
        @extend %hidden-clip;
    }
    @else
    {
        position: absolute;  clip: rect(1px, 1px, 1px, 1px);
    }
}

%hidden-clip
{
    @include hidden-clip(false);
}

// ellipsis
@mixin ellipsis($extend: true)
{
    @if $extend
    {
        @extend %ellipsis;
    }
    @else
    {
        overflow: hidden;  white-space: nowrap;  text-overflow: ellipsis;
    }
}

%ellipsis
{
    @include ellipsis(false);
}

// ellipsis lines
// only old webkit flex box
@mixin ellipsis-lines($lines: 2)
{
    display: -webkit-box;  overflow: hidden;  -webkit-box-orient: vertical;  text-overflow: ellipsis;  -webkit-line-clamp: $lines;
}

// word-break
@mixin word-break($extend: true)
{
    @if $extend
    {
        @extend %word-break;
    }
    @else
    {
        white-space: normal;  word-wrap: break-word;  word-break: break-all;
    }
}

%word-break
{
    @include word-break(false);
}

// disabled
// add !important
@mixin disabled($colorText: map-get($colorDisabled, text), $colorBg: map-get($colorDisabled, bg), $colorBorder: false)
{
    cursor: default !important;  pointer-events: none !important;  color: $colorText !important;  background-color: $colorBg !important;
    @if $colorBorder
    {
        border: 1px solid map-get($colorDisabled, border);
    }
}

%disabled
{
    @include disabled;
}

// image replace text
@mixin ir($extend: true)
{
    @if $extend
    {
        @extend %ir;
    }
    @else
    {
        font: 0/0 a;  color: transparent;  border: 0 none;  text-shadow: none;
    }
}

%ir
{
    @include ir(false);
}

// fixed top or bottom or bottom & top
@mixin fixed($pos: 0)
{
    position: fixed;  right: 0;  left: 0;
    @if $pos == bottom
    {
        bottom: 0;
    } @else if $pos == all
    {
        top: 0;  bottom: 0;
    } @else
    {
        top: $pos;
    }
}

%fixed-top
{
    @include fixed;
}

%fixed-bottom
{
    @include fixed(bottom);
}

// justify
// 左右对齐
@mixin justify($extend: true)
{
    @if $extend
    {
        @extend %justify;
    }
    @else
    {
        display: flex;  justify-content: space-between;
    }
}

%justify
{
    @include justify(false);
}

// retina border
// 0.5px实现 ios9
@mixin retina-one-px()
{
    @supports (border-width: .5px)
    {
        @media only screen and (-webkit-min-device-pixel-ratio: 2), screen and (-webkit-min-device-pixel-ratio: 3)
        {
            border-width: .5px;
        }
    }
}

// linear-gradient实现
// 安卓4.3- 不支持background-size的百分比
@mixin retina-one-px-bg($direction: top, $color: $colorBorder)
{
    background-repeat: no-repeat;
    @if $direction == top
    {
        background-image: linear-gradient(to bottom, $color 50%, transparent 50%);  background-size: 100% 1px;
    }
    @if $direction == bottom
    {
        background-image: linear-gradient(to top, $color 50%, transparent 50%);  background-position: left bottom;  background-size: 100% 1px;
    }
    @if $direction == left
    {
        background-image: linear-gradient(to right, $color 50%, transparent 50%);  background-size: 1px 100%;
    }
    @if $direction == right
    {
        background-image: linear-gradient(to left, $color 50%, transparent 50%);  background-position: right top;  background-size: 1px 100%;
    }
    @if $direction == v
    {
        // 左右两个边框
        background-image: linear-gradient(to right, $color 50%, transparent 50%),linear-gradient(to left, $color 50%, transparent 50%);  background-position: left top, right top;  background-size: 1px 100%;
    }
    @if $direction == h
    {
        // 上下两个边框
        background-image: linear-gradient(to bottom, $color 50%, transparent 50%), linear-gradient(to top, $color 50%, transparent 50%);  background-position: left top, left bottom;  background-size: 100% 1px;
    }
    @if $direction == all
    {
        // 上下左右四个边框
        background-image: linear-gradient(to bottom, $color 50%, transparent 50%), linear-gradient(to top, $color 50%, transparent 50%), linear-gradient(to right, $color 50%, transparent 50%),linear-gradient(to left, $color 50%, transparent 50%);  background-position: left top, left bottom, left top, right top;  background-size: 100% 1px, 100% 1px, 1px 100%, 1px 100%;
    }
}

// border和transform实现
// 注意before和after的层级问题
@mixin retina-one-px-border($direction: top, $color: $colorBorder)
{
    position: absolute;  top: 0;  left: 0;  box-sizing: border-box;
    @if $direction == top or $direction == bottom
    {
        right: 0;  height: 0;  transform: scaleY(.5);  border-top: 1px solid $color;
    }
    @if $direction == bottom
    {
        top: auto;  bottom: 0;
    }
    @if $direction == right or $direction == left
    {
        bottom: 0;  width: 0;  transform: scaleX(.5);  border-left: 1px solid $color;
    }
    @if $direction == right
    {
        right: 0;  left: auto;
    }
    @if $direction == all
    {
        width: 200%;  height: 200%;  transform: scale(.5);  transform-origin: left top;  border: 1px solid $color;
    }
}

// border top & bottom
%border-tb
{
    position: relative;
    &::before
    {
        z-index: 1;  content: '';

@include retina-one-px-border(top);
    }
    &::after
    {
        content: '';

@include retina-one-px-border(bottom);
    }
}

// border all
%border-all
{
    position: relative;
    &::before
    {
        z-index: -1;  content: '';

@include retina-one-px-border(all);
    }
}

// mixin
// 只定义了mixin，所以只能通过@include来调用
//-----------------------------------------------------

// table 等
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-table($child: 'li')
{
    display: table;  width: 100%;  table-layout: fixed;
    #{unquote($child)}
    {
        display: table-cell;
    }
}

// flex 等分
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-flex($child: 'li')
{
    display: flex;

    #{unquote($child)}
    {
        flex: 1;  width: 1%;
    }
}

// line equal gap
// $child 参数请使用单引号，因为用于子元素选择器
@mixin line-equal-gap($gap: 10px, $child: 'li', $lr: true)
{
    display: flex;

    @if $lr
    {
        padding-right: $gap;  padding-left: $gap;
    }

    #{unquote($child)}
    {
        flex: 1;  width: 1%;
        &:not(:first-of-type)
        {
            margin-left: $gap;
        }
    }
}

// line equal item
@mixin line-equal-item($lr: true)
{
    display: flex;  justify-content: space-between;
    @if $lr
    {
        &::before,
        &::after
        {
            content: '';
        }
    }
}

// flex center
@mixin center-flex($direction: both)
{
    display: flex;
    @if $direction == both
    {
        align-items: center;  justify-content: center;
    }
    @else if $direction == x
    {
        justify-content: center;
    }
    @else if $direction == y
    {
        align-items: center;
    }
}

// translate center
@mixin center-translate($direction: both)
{
    position: absolute;
    @if $direction == both
    {
        top: 50%;  left: 50%;  transform: translate3d(-50%, -50%, 0);
    }
    @else if $direction == x
    {
        left: 50%;  transform: translate3d(-50%, 0, 0);
    }
    @else if $direction == y
    {
        top: 50%;  transform: translate3d(0, -50%, 0);
    }
}

// object wrap
// $child 参数请使用单引号，因为用于子元素选择器
@mixin object-wrap($percent: 100%, $child: 'img')
{
    position: relative;  height: 0;  padding-top: $percent;
    #{unquote($child)}
    {
        position: absolute;  top: 0;  left: 0;  width: 100%;  height: 100%;
    }
}

// triangle 三角箭头
// 可采用空元素或伪元素生成，具体定位这里不涉及
%triangle-basic
{
    overflow: hidden;  width: 0;  height: 0;  content: '';
}

@mixin triangle($direction: top, $borderWidth: 6px, $borderColor: $colorC)
{
    @extend %triangle-basic;
    @if $direction == top
    {
        border-right: $borderWidth dashed transparent;  border-bottom: $borderWidth solid $borderColor;  border-left: $borderWidth dashed transparent;
    }
    @else if $direction == right
    {
        border-top: $borderWidth dashed transparent;  border-bottom: $borderWidth dashed transparent;  border-left: $borderWidth solid $borderColor;
    }
    @else if $direction == bottom
    {
        border-top: $borderWidth solid $borderColor;  border-right: $borderWidth dashed transparent;  border-left: $borderWidth dashed transparent;
    }
    @else if $direction == left
    {
        border-top: $borderWidth dashed transparent;  border-right: $borderWidth solid $borderColor;  border-bottom: $borderWidth dashed transparent;
    }
}

// v arrow 方向箭头
@mixin v-arrow($direction: right, $borderWidth: 2px, $size: 10px)
{
    display: inline-block;  width: $size;  height: $size;  vertical-align: middle;
    @if $direction == top
    {
        transform: rotate(-45deg);  border-top: $borderWidth solid currentColor;  border-right: $borderWidth solid currentColor;
    }
    @else if $direction == right
    {
        transform: rotate(45deg);  border-top: $borderWidth solid currentColor;  border-right: $borderWidth solid currentColor;
    }
    @else if $direction == bottom
    {
        transform: rotate(-45deg);  border-bottom: $borderWidth solid currentColor;  border-left: $borderWidth solid currentColor;
    }
    @if $direction == left
    {
        transform: rotate(45deg);  border-bottom: $borderWidth solid currentColor;  border-left: $borderWidth solid currentColor;
    }
}

// selector
// 改变父元素状态，如:hover或.active
// 父元素不能有组合选择器，如.a, .b{}
// .parent{
//     .child{
//         @include parent-state(":hover"){
//             color: #f00;
//         }
//     }
// }
// .parent:hover .child {
//     color: #f00;
// }
@mixin parent-state($states...)
{
    $parent: nth(nth(&, 1), (length(nth(&, 1))-1));

    @each $state in $states
    {
        @at-root #{selector-replace(&, $parent, str-insert($state, $parent, 0))}
        {
            @content;
        }
    }
}

// animation-fade
// @include animation-fade
// @include animation-fade($from: false, $to: .5);
// @include animation-fade($from: 1, $to: 0);
@mixin animation-fade($name: animationFade, $from: 0, $to: false)
{
    @keyframes #{animationFade}
    {
        @if $from
        {
            from
            {
                opacity: $from;
            }
        }
        @if $to
        {
            to
            {
                opacity: $to;
            }
        }
    }
}

// animation-translate
// @include animation-translate
// @include animation-translate($from: x -100%);
// @include animation-translate($from: xy -50% -50%, $to: y -100%);
// @include animation-translate($from: y 100px, $to: y 0px);
@mixin animation-translate($name: animationTranslate, $from: y -100%, $to: false)
{
    @keyframes #{$name}
    {
        @if $from and length($from) > 1
        {
            from
            {
                @if nth($from, 1) == x
                {
                    transform: translate(nth($from, 2), 0);
                }
                @if nth($from, 1) == y
                {
                    transform: translate(0, nth($from, 2));
                }
                @if nth($from, 1) == xy or nth($from, 1) == both
                {
                    transform: translate(nth($from, 2), nth($from, 3));
                }
            }
        }
        @if $to andd length($to) > 1
        {
            to
            {
                @if nth($to, 1) == x
                {
                    transform: translate(nth($to, 2), 0);
                }
                @if nth($to, 1) == y
                {
                    transform: translate(0, nth($to, 2));
                }
                @if nth($to, 1) == xy or nth($to, 1) == both
                {
                    transform: translate(nth($to, 2), nth($to, 3));
                }
            }
        }
    }
}

// %
// 只定义了%，所以只能通过@extend来调用
//-----------------------------------------------------

// bar line
$barHeight: 40px;
$activeStateSwitch: true;
$colorF: #fff;
$colorC: #ccc;
%bar-line
{
    line-height: $barHeight - 10px;  position: relative;  display: block;  overflow: hidden;  padding: 5px 10px;
    @if $activeStateSwitch
    {
        &:active,
        &:hover
        {
            background-color: darken($colorF, 3%);
        }
    }
    &:not(:first-of-type)::before
    {
        content: '';

@include retina-one-px-border;
    }
}

// item arrow, 右侧箭头跳转指向
%item-v-right
{
    &::after
    {
        position: absolute;  top: 50%;  right: 15px;  box-sizing: border-box;  margin-top: -1px;  content: '';  transform: rotate(45deg) translate(0, -50%);  color: $colorC;

@include v-arrow;
    }
}

// 间隔列表
%gap-item
{
    position: relative;  margin: 10px 0;  background: #fff;
    @if $activeStateSwitch
    {
        &:active,
        &:hover
        {
            background-color: darken($colorF, 3%);
        }
    }
    &::before
    {
        content: '';

@include retina-one-px-border;
    }
    &::after
    {
        content: '';

@include retina-one-px-border(bottom);
    }
}

// 下面的几个%，由于版本或前缀，所以设计成%
//-----------------------------------------------------
// flex
%display-flex
{
    display: flex;
}

// all-transition
%transition-all
{
    transition: all .3s ease-in-out;
}

// translate3d
%translate3d
{
    transform: translate3d(0, 0, 0);
}


// btn
//----------------------------------------------------
// btn-basic
// 按钮基本样式，联合申明
%btn-basic
{
    display: inline-block;  box-sizing: border-box;  padding: 0 1em;  cursor: pointer;  user-select: none;  text-align: center;  vertical-align: middle;  white-space: nowrap;  border: 1px solid transparent;
}

// btn-size
// 按钮大小
@mixin btn-size($padding: 1em, $height: $barHeight, $radius: 3px)
{
    line-height: $height - 2px; // 减掉2px的上下高度  padding: 0 $padding;

    @if $radius
    {
        border-radius: $radius;
    }
}

// btn-color
// 包括按钮背景色，文本色，是否有边框
@mixin btn-color($colorText: #333, $colorBg: #666, $colorBorder: false)
{
    color: nth($colorText, 1);  background-color: nth($colorBg, 1);
    @if $colorBorder
    {
        border-color: nth($colorBorder, 1);
    }
    &:hover,
    &:active
    {
        @if length($colorText) == 2
        {
            color: nth($colorText, 2);
        }
        @if length($colorBg) == 2
        {
            background-color: nth($colorBg, 2);
        } @else
        {
            @if lightness($colorBg) > 40%
            {
                background-color: darken($colorBg, 5%);
            }
            @else
            {
                background-color: lighten($colorBg, 5%);
            }
        }
        @if $colorBorder and length($colorBorder) == 2
        {
            border-color: nth($colorBorder, 2); // $colorBorder: #dbdbdb #ccc => #ccc
        }
    }
}

@mixin b($block)
{
    .#{$block}
    {
        @content;
    }
}

@mixin e($element)
{
    $selector: &;
    @if containsModifier($selector)
    {
        $block: getBlock($selector);
        @at-root
        {
            #{$selector}
            {
                #{$block+$elementSeparator+$element}
                {
                    @content;
                }
            }
        }
    } @else
    {
        @at-root
        {
            #{$selector+$elementSeparator+$element}
            {
                @content;
            }
        }
    }
}

@mixin m($modifier)
{
    @at-root
    {
        #{&}#{$modifierSeparator+$modifier}
        {
            @content;
        }
    }
}


//function
//-----------------------------------------------------

// 为颜色添加白色，以百分比形式
@function tint($color, $percent)
{
    @return mix(white, $color, $percent);
}

// 为颜色添加黑色，以百分比形式
@function shade($color, $percent)
{
    @return mix(black, $color, $percent);
}

// 将$selector转换成String
@function selectorToString($selector)
{
    $selector: inspect($selector); //cast to string    $selector: str-slice($selector, 2, -2); //remove brackets
    @return $selector;
}

// 判断$selector中是否包含BEM中Modify
@function containsModifier($selector)
{
    $selector: selectorToString($selector);
    @if str-index($selector, $modifierSeparator)
    {
        @return true;
    } @else
    {
        @return false;
    }
}

@function getBlock($selector)
{
    $selector: selectorToString($selector);  $modifierStart: str-index($selector, $modifierSeparator) - 1;
    @return str-slice($selector, 0, $modifierStart);
}

// px to rem function
@function  rem($px)
{
    @return $px / $browserDefaultFontSize * 1rem;
}
